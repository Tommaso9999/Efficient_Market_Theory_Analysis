import sys
sys.path.append('../Thesis Practical Work')


import yfinance as yf
import datetime as dt
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.ticker as ticker
from Configurations import start_date, end_date, index, index1

#ATTENTION: you can skip this script for now as it is not useful, it just replicates the index. I wrote it just to have a base case and simulate periodic 
#increase in investment (as an example invest additional 200$ every month into the index).

def regularStrat(ticker):
    investment_amount = 0


    sp500_data = yf.download(ticker, start=start_date, end=end_date)

    current = sp500_data['Close'].iloc[0]
    equity = [current]


    price = sp500_data['Open'][-1]

    print(price)
    # Loop through the data and simulate the bot's behavior. in this case the behaviour is don't do anything. 
    for k in range(1, len(sp500_data.index)-1):


        prev = sp500_data['Close'].iloc[k-1]
        current = sp500_data['Close'].iloc[k]
        differential_percentage = (current - prev) / prev

        if sp500_data.index[k].day == 1:  # Invest on the first day of every month
            investment = investment_amount

        
            equity.append((equity[-1] + investment)*(1+differential_percentage))
        else:
            equity.append(equity[-1]*(1+differential_percentage))


    sp500_data.index = pd.to_datetime(sp500_data.index)

    plot_data = pd.DataFrame({'Date': sp500_data.index[:-1], 'Equity': equity})

    return sp500_data, equity, plot_data
       







def plotting(sp500_data, equity, plot_data):

    plt.figure(figsize=(12, 6))
    plt.plot(plot_data['Date'], plot_data['Equity'])
    plt.title('Equity Generated by Bot')
    plt.xlabel('Date')
    plt.ylabel('Equity ($)')
    plt.plot(sp500_data['Close'], label=index + 'Close', color='red')
    plt.ticklabel_format(style='plain', axis='y')
    plt.gca().get_yaxis().set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
    plt.title('Equity Growth ' + index +'with Trading Bot Technique:\n Buy & Hold')


    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)



    plt.legend(['Equity', index + ' Close'], loc='upper left')

    plt.ylim(ymin=0)
    plt.ylim(ymax=max(sp500_data['Close'].max(), plot_data['Equity'].max())*1.2)

    plt.show()


if __name__=="__main__":
 
 sp500_data, equity, plot_data = regularStrat(index1)

 sp500_data.index = pd.to_datetime(sp500_data.index)
 
 plotting(sp500_data, equity, plot_data)