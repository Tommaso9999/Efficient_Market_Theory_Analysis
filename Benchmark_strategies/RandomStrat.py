import sys
sys.path.append('../Thesis Practical Work')

import yfinance as yf
import datetime as dt
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.ticker as ticker
import random
import datetime as dt
from Configurations import start_date, end_date, index, index1



def randomStrat(ticker):
    sp500_data = yf.download(ticker, start=start_date, end=end_date)
    liquidity = [0]
    current = sp500_data['Close'].iloc[0]
    equity = [current]
    action = "buy"
    random.seed(int(dt.datetime.now().strftime('%Y%m%d%H%M%S')))

    # Loop through the data and simulate behaviour, in this case random trading once a month
    for k in range(1, len(sp500_data.index)-1):
        
        prev = sp500_data['Close'].iloc[k-1]
        current = sp500_data['Close'].iloc[k]
        differential_percentage = 1+((current - prev) / prev)

        if sp500_data.index[k].day == 1:
            action = random.choice(["buy", "sell"]) #random choice between buy and sell once a month

        if action=="buy" and liquidity[-1] !=0 and sp500_data.index[k].day == 1:  # Invest on the first day of every month
            liquidity.append(0)

        if action=="sell" and liquidity[-1]==0 and sp500_data.index[k].day == 1:
            liquidity.append(equity[-1])

        if action=="buy": 
            equity.append(equity[-1]*differential_percentage)

        if action=="sell":
            equity.append(equity[-1])
    
    return sp500_data, equity




def plotting(sp500_data, equity ):

  
    plt.figure(figsize=(12, 6))
    plt.plot(plot_data['Date'], plot_data['Equity'])
    plt.title('Equity Generated by Bot')
    plt.xlabel('Date')
    plt.ylabel('Equity ($)')

    plt.ticklabel_format(style='plain', axis='y')
    plt.gca().get_yaxis().set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
    plt.plot(sp500_data['Close'], label='S&P 500 Close', color='red')
    plt.title('Equity Growth ' + index + ' with Trading Bot Technique:\n RANDOM')

    plt.text(sp500_data.index[-1], plot_data['Equity'].iloc[-1], 'Equity', ha='left', va='bottom')
    plt.text(sp500_data.index[-1], sp500_data['Close'].iloc[-1], index + ' Price', ha='left', va='bottom', color='red')
    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)

    plt.legend(['Equity', index + 'Price'], loc='upper left')
    
    plt.ylim(ymin=0)
    plt.ylim(ymax=max(sp500_data['Close'].max(), plot_data['Equity'].max())*1.2)
    
    plt.show()







if __name__=="__main__":
    sp500_data, equity = randomStrat(index1)
    plot_data = pd.DataFrame({'Date': sp500_data.index[:-1], 'Equity': equity})
    plotting(sp500_data, equity)
    